<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Python元组详解]]></title>
      <url>/2018/02/12/Python%E5%85%83%E7%BB%84/</url>
      <content type="html"><![CDATA[<h1 id="Python元组"><a href="#Python元组" class="headerlink" title="Python元组"></a>Python元组</h1><p>Python元组是对数据的记录：元组中的每个元素都存放了记录中一个字段的数据，外加这个字段的位置。正是这个位置信息给数据赋予了意义。</p>
<p>下面看一段代码就能很直观的看到元组的使用和意义。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name, age = (<span class="string">'JZen'</span>, <span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>persons = [(<span class="string">'Jack'</span>, <span class="number">23</span>), (<span class="string">'Mary'</span>, <span class="number">22</span>), (<span class="string">'Tom'</span>, <span class="number">20</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> sorted(persons):</span><br><span class="line">	print(<span class="string">'name:%s, age:%d'</span> % p)</span><br><span class="line"></span><br><span class="line">name:Jack, age:<span class="number">23</span></span><br><span class="line">name:Mary, age:<span class="number">22</span></span><br><span class="line">name:Tom, age:<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, _ <span class="keyword">in</span> persons:</span><br><span class="line">	print(name)</span><br><span class="line"></span><br><span class="line">Jack</span><br><span class="line">Mary</span><br><span class="line">Tom</span><br></pre></td></tr></table></figure>
<h2 id="元组拆包"><a href="#元组拆包" class="headerlink" title="元组拆包"></a>元组拆包</h2><p>元组拆包的形式就是平行赋值，少废话，看代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one, two = nums</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>two</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>另外，还有一种很优雅的写法，当你要交换两个变量的值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure>
<p>可以用下滑线替换不需要的值</p>
<h2 id="在方法返回值中使用"><a href="#在方法返回值中使用" class="headerlink" title="在方法返回值中使用"></a>在方法返回值中使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(a, b)</span></span></span><br><span class="line">	return a+b, a*b</span><br><span class="line"></span><br><span class="line">sum, mul = calculate(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sum = 5, mul = 6</span></span><br></pre></td></tr></table></figure>
<h2 id="关于-号的用法"><a href="#关于-号的用法" class="headerlink" title="关于*号的用法"></a>关于*号的用法</h2><p>可以用 * 运算符把一个可迭代对象拆开作为函数的参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>divmod(<span class="number">20</span>, <span class="number">8</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">20</span>, <span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divmod(*t)</span><br><span class="line">(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>用*来处理剩下的元素：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, *rest = range(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, rest</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, *rest = range(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, rest</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, [])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, *rest, b = range(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, rest</span><br><span class="line">(<span class="number">0</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<p>*号只能用在变量名的前面</p>
<h2 id="具名元组"><a href="#具名元组" class="headerlink" title="具名元组"></a>具名元组</h2><p>顾名思义，就是带有名字的元组，这里的名字是指<code>name</code>或者<code>key</code></p>
<p>具体是使用<code>collections.namedtuple</code>函数。他是一个工厂函数，用来构建一个带有字段名的元组和一个有名字的类。调试程序的时候会很舒服。</p>
<p>使用之前先import</p>
<p><code>from collections import namedtuple</code></p>
<p>然后看下面例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Person = namedtuple(&apos;Person&apos;, &apos;name age gender&apos;)</span><br><span class="line">&gt;&gt;&gt; JZen = Person(&apos;JZen&apos;, 20, &apos;male&apos;)</span><br><span class="line">&gt;&gt;&gt; JZen</span><br><span class="line">Person(name=&apos;JZen&apos;, age=20, gender=&apos;male&apos;)</span><br><span class="line">&gt;&gt;&gt; JZen.name</span><br><span class="line">&apos;JZen&apos;</span><br><span class="line">&gt;&gt;&gt; JZen[1]</span><br><span class="line">20</span><br></pre></td></tr></table></figure>
<p>这样看一遍我想应该都明白了吧。主要是<code>namedtuple</code>方法里面的两个参数，第一个参数是<code>typename</code>，这个可以取一个比较好认的名字，这取决于你自己。重点是第二个参数，可以是一段字符串，也可以是一个包含字符串的可迭代集合，比如上面那行可以写成这样：</p>
<p><code>namedtuple(&#39;Person&#39;, [&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;])</code></p>
<p>除了从普通元组继承来的属性之外，具名元组还有一些自己专有的属性。下面展示几个最有用的：<code>_fields</code>类属性、类方法<code>_make(iterable)</code>和实例方法<code>_asdict()</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Person._fields</span><br><span class="line">(&apos;name&apos;, &apos;age&apos;, &apos;gender&apos;)</span><br><span class="line">&gt;&gt;&gt; jack_info = (&apos;Jack&apos;, 18, &apos;male&apos;)</span><br><span class="line">&gt;&gt;&gt; Jack = Person._make(jack_info)</span><br><span class="line">&gt;&gt;&gt; Jack._asdict()</span><br><span class="line">OrderedDict([(&apos;name&apos;, &apos;Jack&apos;), (&apos;age&apos;, 18), (&apos;gender&apos;, &apos;male&apos;)])</span><br><span class="line">&gt;&gt;&gt; for key, value in Jack._asdict().items():</span><br><span class="line">	print(key, &apos;:&apos;, value)</span><br><span class="line">	</span><br><span class="line">name : Jack</span><br><span class="line">age : 18</span><br><span class="line">gender : male</span><br></pre></td></tr></table></figure>
<h4 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h4><p><code>_fields</code>：包含着这个元组的所有字段名称的属性</p>
<p><code>_make(jack_info)</code>：和<code>Person(*jack_info)</code>作用一样。</p>
<p><code>_asdict()</code>：把具名元组以<code>collections.OrderedDict</code>的形式返回，利用它我们可以友好地将元组的信息呈现出来。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Python特殊方法]]></title>
      <url>/2018/02/12/%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>魔术方法（magic method）是特殊方法的昵称，在Python中的特殊方法，一般都是使用诸如<code>__xxx__</code>（前后两个下划线，中间是方法名）的命名方式，在书里有个名词也可以形容它，比如<code>__getitem__</code>，叫做“双下—getitem” (dunnder-getitem)</p>
<h2 id="万事开头难"><a href="#万事开头难" class="headerlink" title="万事开头难"></a>万事开头难</h2><p>难以用概念去概括Python特殊方法的作用，最简单的方法就是用例子说明。</p>
<p>很多人都会选择使用Python作为快速开发工具，而特殊方法是属于“快速”这个性质。</p>
<p>在Python中，要拿到一个集合的某个元素，可以使用对应的引索进行取值，比如<code>list[key]</code>，这背后利用的是<code>__getitem__</code>方法，为了拿到<code>my_list[key]</code>的值，解释器实际上会调用<code>my_list.__getitem__(key)</code>。</p>
<p>Python也是面向对象编程语言，对于求一个集合的长度使用<code>len(list)</code>而不是<code>list.len()</code>会感觉有点奇怪，背后就是特殊方法的作用，调用了<code>list.__len__()</code>方法，和面向对象完全符合，而且还起到简化的作用，变得更加通俗易懂。</p>
<h2 id="一个完整的例子"><a href="#一个完整的例子" class="headerlink" title="一个完整的例子"></a>一个完整的例子</h2><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">Card = collections.namedtuple(<span class="string">'Card'</span>,[<span class="string">'rank'</span>, <span class="string">'suit'</span>])   <span class="comment"># 具名元组</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrenchDeck</span>:</span></span><br><span class="line">    ranks = [str(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">11</span>)] + list(<span class="string">'JQKA'</span>)  <span class="comment"># 牌数 </span></span><br><span class="line">    suits = <span class="string">'spades hearts clubs diamonds'</span>.split()        <span class="comment"># 牌色</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>                            <span class="comment"># 初始化（构造函数）</span></span><br><span class="line">        self._cards = [Card(rank, suit) <span class="keyword">for</span> suit <span class="keyword">in</span> self.suits</span><br><span class="line">                                        <span class="keyword">for</span> rank <span class="keyword">in</span> self.ranks]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span>                             <span class="comment"># 用len取长度的特殊方法</span></span><br><span class="line">        <span class="keyword">return</span> len(self._cards)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, position)</span>:</span>               <span class="comment"># 用引索取值的特殊方法</span></span><br><span class="line">        <span class="keyword">return</span> self._cards[position]</span><br></pre></td></tr></table></figure>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; deck = FrenchDeck()</span><br><span class="line">&gt;&gt;&gt; len(deck)</span><br><span class="line">52</span><br><span class="line">&gt;&gt;&gt; deck[0]</span><br><span class="line">Card(rank=&apos;2&apos;, suit=&apos;spades&apos;)</span><br></pre></td></tr></table></figure>
<h4 id="随机抽牌"><a href="#随机抽牌" class="headerlink" title="随机抽牌"></a>随机抽牌</h4><p>那么我们可以使用random模块里面的一个方法随机抽取一张牌</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from random import choice</span><br><span class="line">&gt;&gt;&gt; choice(deck)</span><br><span class="line">Card(rank=&apos;2&apos;, suit=&apos;clubs&apos;)</span><br><span class="line">&gt;&gt;&gt; choice(deck)</span><br><span class="line">Card(rank=&apos;J&apos;, suit=&apos;clubs&apos;)</span><br></pre></td></tr></table></figure>
<h4 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h4><p>既然我们实现了引索中括号[]操作，那么我们也可以使用切片操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; deck[:3]</span><br><span class="line">[Card(rank=&apos;2&apos;, suit=&apos;spades&apos;), Card(rank=&apos;3&apos;, suit=&apos;spades&apos;), </span><br><span class="line">Card(rank=&apos;4&apos;, suit=&apos;spades&apos;)]</span><br><span class="line">&gt;&gt;&gt; deck[12::13]</span><br><span class="line">[Card(rank=&apos;A&apos;, suit=&apos;spades&apos;), Card(rank=&apos;A&apos;, suit=&apos;hearts&apos;), </span><br><span class="line">Card(rank=&apos;A&apos;, suit=&apos;clubs&apos;), Card(rank=&apos;A&apos;, suit=&apos;diamonds&apos;)]</span><br></pre></td></tr></table></figure>
<h4 id="迭代操作"><a href="#迭代操作" class="headerlink" title="迭代操作"></a>迭代操作</h4><p>另外，仅仅实现了<code>__getitem__</code>方法，那么也变成了可迭代的了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for card in deck: # 反向迭代也可以 reversed(deck)</span><br><span class="line">	print(card)</span><br><span class="line"></span><br><span class="line">Card(rank=&apos;2&apos;, suit=&apos;spades&apos;)</span><br><span class="line">Card(rank=&apos;3&apos;, suit=&apos;spades&apos;)</span><br><span class="line">Card(rank=&apos;4&apos;, suit=&apos;spades&apos;)</span><br><span class="line">···</span><br><span class="line">Card(rank=&apos;Q&apos;, suit=&apos;diamonds&apos;)</span><br><span class="line">Card(rank=&apos;K&apos;, suit=&apos;diamonds&apos;)</span><br><span class="line">Card(rank=&apos;A&apos;, suit=&apos;diamonds&apos;)</span><br></pre></td></tr></table></figure>
<h4 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h4><p>如果一个集合没有实现<code>__contains__</code>方法，那么<code>in</code>运算符会按顺序做一次迭代搜索。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Card(<span class="string">'A'</span>, <span class="string">'hearts'</span>) <span class="keyword">in</span> deck</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Card(<span class="string">'B'</span>, <span class="string">'hearts'</span>) <span class="keyword">in</span> deck</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>按照扑克牌的大小，2最小，A最大，同时要加上花色的大小判定，从大到小排序：黑桃、红桃、梅花、方块。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">suit_values = dict(spades = <span class="number">3</span>, hearts = <span class="number">2</span>, clubs = <span class="number">1</span>, diamonds = <span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spades_high</span><span class="params">(card)</span>:</span></span><br><span class="line">	rank_value = FrenchDeck.ranks.index (card.rank)</span><br><span class="line">	<span class="keyword">return</span> rank_value * len(suit_values) + suit_values[card.suit]</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> card <span class="keyword">in</span> sorted(deck, key = spades_high):</span><br><span class="line">	print(card)</span><br><span class="line"></span><br><span class="line">Card(rank=<span class="string">'2'</span>, suit=<span class="string">'diamonds'</span>)</span><br><span class="line">Card(rank=<span class="string">'2'</span>, suit=<span class="string">'clubs'</span>)</span><br><span class="line">Card(rank=<span class="string">'2'</span>, suit=<span class="string">'hearts'</span>)</span><br><span class="line">Card(rank=<span class="string">'2'</span>, suit=<span class="string">'spades'</span>)</span><br><span class="line">···</span><br><span class="line">Card(rank=<span class="string">'A'</span>, suit=<span class="string">'diamonds'</span>)</span><br><span class="line">Card(rank=<span class="string">'A'</span>, suit=<span class="string">'clubs'</span>)</span><br><span class="line">Card(rank=<span class="string">'A'</span>, suit=<span class="string">'hearts'</span>)</span><br><span class="line">Card(rank=<span class="string">'A'</span>, suit=<span class="string">'spades'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法]]></title>
      <url>/2018/02/08/Markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="Markdown-基础语法"><a href="#Markdown-基础语法" class="headerlink" title="Markdown 基础语法"></a>Markdown 基础语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级</span><br><span class="line">###  3</span><br><span class="line">####  4</span><br><span class="line">#####  5</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 苟利国家生死以，其因祸福避趋之。  </span><br><span class="line">&gt; -- 长者</span><br></pre></td></tr></table></figure>
<blockquote>
<p>苟利国家生死以，其因祸福避趋之。<br>​– 长者</p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* abc</span><br><span class="line">* abc</span><br></pre></td></tr></table></figure>
<ul>
<li>abc</li>
<li>abc</li>
</ul>
<p><code>*</code> 可以用 <code>+</code> 或者 <code>-</code> 代替</p>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 写一个自动关机程序</span><br><span class="line">2. 设置为自启</span><br></pre></td></tr></table></figure>
<ol>
<li>写一个自动关机程序</li>
<li>设置为自启</li>
</ol>
<p><strong>数字不会影响输出</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 按照第一行的序号开始排列</span><br><span class="line">6. 这里不管是啥数字，都会是2</span><br></pre></td></tr></table></figure>
<ol>
<li>按照第一行的序号开始排列</li>
<li>这里不管是啥数字，都会是2</li>
</ol>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>下面的都可以用作分割线</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是**加粗**的</span><br></pre></td></tr></table></figure>
<p>这是<strong>加粗</strong>的</p>
<h3 id="倾斜"><a href="#倾斜" class="headerlink" title="倾斜"></a>倾斜</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是*倾斜*的</span><br></pre></td></tr></table></figure>
<p>这是<em>倾斜</em>的</p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s&gt;卖萌嘟嘴剪刀手&lt;/s&gt;</span><br></pre></td></tr></table></figure>
<p><s>卖萌嘟嘴剪刀手</s></p>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;这个只能用html标签了&lt;/u&gt;</span><br></pre></td></tr></table></figure>
<p><u>这个只能用html标签了</u></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度一下](http://blog.ougaojun.com)</span><br></pre></td></tr></table></figure>
<p><a href="http://blog.ougaojun.com" target="_blank" rel="noopener">百度一下</a></p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://blog.ougaojun.com/upload/2017/11/rhahu42vmmg95qjjr2fist5ps4.png)</span><br></pre></td></tr></table></figure>
<p><strong><img src="http://blog.ougaojun.com/upload/2017/11/rhahu42vmmg95qjjr2fist5ps4.png" alt=""></strong></p>
<h1 id="Markdown-进阶语法"><a href="#Markdown-进阶语法" class="headerlink" title="Markdown 进阶语法"></a>Markdown 进阶语法</h1><h2 id="目录大纲"><a href="#目录大纲" class="headerlink" title="目录大纲"></a>目录大纲</h2><p>这个在此博客中不支持，所以就以图片的形式展示效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[toc]</span><br></pre></td></tr></table></figure>
<p><img src="http://blog.ougaojun.com/upload/2017/11/6gc2063usmijnp8nr5k3mntq52.jpg" alt=""></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|姓名|性别|</span><br><span class="line">|---|:---:|</span><br><span class="line">|赵日天|女|</span><br><span class="line">|长者|男|</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>姓名</th>
<th style="text-align:center">性别</th>
</tr>
</thead>
<tbody>
<tr>
<td>赵日天</td>
<td style="text-align:center">女</td>
</tr>
<tr>
<td>长者</td>
<td style="text-align:center">男</td>
</tr>
</tbody>
</table>
<p>这里面第二行<code>---</code>里面的<code>-</code>号可以是任意个。</p>
<p><code>:--</code> 左对齐</p>
<p><code>--:</code> 右对齐</p>
<p><code>:--:</code> 居中</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​` ` `python</span><br><span class="line">print(&quot;Hello World！&quot;)</span><br><span class="line">` ` `</span><br><span class="line">把空格去掉，因为这里有冲突，没处理好。</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello World！"</span>)</span><br></pre></td></tr></table></figure>
<p>这里可以指定某种语言</p>
<h3 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`printf(&quot;Hello World&quot;);`</span><br></pre></td></tr></table></figure>
<p><code>printf(&quot;Hello World&quot;);</code></p>
<p>这里就是单纯的一行代码块</p>
<h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://blog.ougaojun.com/&gt;</span><br></pre></td></tr></table></figure>
<p><a href="http://blog.ougaojun.com/" target="_blank" rel="noopener">http://blog.ougaojun.com/</a></p>
<h2 id="Flow-流程图"><a href="#Flow-流程图" class="headerlink" title="Flow 流程图"></a>Flow 流程图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">​` ` `flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: 执行</span><br><span class="line">cond=&gt;condition: 是或否</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">​` ` `</span><br></pre></td></tr></table></figure>
<p><img src="http://blog.ougaojun.com/upload/2017/11/vubum9id2ojqqqkqn0k972ai0i.jpg" alt=""></p>
<h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 写博客</span><br><span class="line">- [ ] 敲代码</span><br><span class="line">- [x] 写进阶教程</span><br></pre></td></tr></table></figure>
<ul>
<li style="list-style: none"><input type="checkbox"> 写博客</li>
<li style="list-style: none"><input type="checkbox"> 敲代码</li>
<li style="list-style: none"><input type="checkbox" checked> 写进阶教程</li>
</ul>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$c^2 = a^2 + b^2$$</span><br></pre></td></tr></table></figure>
<p>$$c^2 = a^2 + b^2$$</p>
<p>需要MathJax的支持，加入js就可以显示了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">  src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">笛卡尔坐标系[^1]</span><br><span class="line"></span><br><span class="line">[^1]: 就是直角坐标系</span><br></pre></td></tr></table></figure>
<p>笛卡尔坐标系<a href="就是直角坐标系">^1</a></p>
<hr>
<p>PS：因为一部分markdown在本博客系统不受支持，所以用图片代替。</p>
<p>2017.11.21：完成初稿。</p>
<p>2017.11.22：修复一个错误，删除线不支持，用 <code>&lt;s&gt;&lt;/s&gt;</code> 代替。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇博客]]></title>
      <url>/2018/02/07/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>本博客基于 <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo</a> + <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 搭建，主题使用 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">Material Theme</a>。</p>
<p>2018-02-07 23:09</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
